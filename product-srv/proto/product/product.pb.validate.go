// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product.proto

package product

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ProductSku with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ProductSku) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Price

	// no validation rules for Stock

	// no validation rules for ProductId

	// no validation rules for CreatedAt

	return nil
}

// ProductSkuValidationError is the validation error returned by
// ProductSku.Validate if the designated constraints aren't met.
type ProductSkuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductSkuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductSkuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductSkuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductSkuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductSkuValidationError) ErrorName() string { return "ProductSkuValidationError" }

// Error satisfies the builtin error interface
func (e ProductSkuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductSku.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductSkuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductSkuValidationError{}

// Validate checks the field values on ProductEntity with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductEntity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Image

	if val := m.GetOnSale(); val < 1 || val > 2 {
		return ProductEntityValidationError{
			field:  "OnSale",
			reason: "value must be inside range [1, 2]",
		}
	}

	// no validation rules for SoldCount

	// no validation rules for ReviewCount

	// no validation rules for Price

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetSkus() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductEntityValidationError{
					field:  fmt.Sprintf("Skus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductEntityValidationError is the validation error returned by
// ProductEntity.Validate if the designated constraints aren't met.
type ProductEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductEntityValidationError) ErrorName() string { return "ProductEntityValidationError" }

// Error satisfies the builtin error interface
func (e ProductEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductEntityValidationError{}

// Validate checks the field values on GetProductListReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetProductListReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StartCreateTime

	// no validation rules for EndCreateTime

	// no validation rules for PageSize

	// no validation rules for Page

	return nil
}

// GetProductListReqValidationError is the validation error returned by
// GetProductListReq.Validate if the designated constraints aren't met.
type GetProductListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductListReqValidationError) ErrorName() string {
	return "GetProductListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductListReqValidationError{}

// Validate checks the field values on GetProductListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProductListReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Msg

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductListReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetProductListReplyValidationError is the validation error returned by
// GetProductListReply.Validate if the designated constraints aren't met.
type GetProductListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductListReplyValidationError) ErrorName() string {
	return "GetProductListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductListReplyValidationError{}

// Validate checks the field values on CreateProductReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateProductReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductReqValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateProductReqValidationError is the validation error returned by
// CreateProductReq.Validate if the designated constraints aren't met.
type CreateProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductReqValidationError) ErrorName() string { return "CreateProductReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductReqValidationError{}

// Validate checks the field values on CreateProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateProductReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Msg

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateProductReplyValidationError is the validation error returned by
// CreateProductReply.Validate if the designated constraints aren't met.
type CreateProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductReplyValidationError) ErrorName() string {
	return "CreateProductReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductReplyValidationError{}

// Validate checks the field values on UpdateProductReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateProductReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductReqValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateProductReqValidationError is the validation error returned by
// UpdateProductReq.Validate if the designated constraints aren't met.
type UpdateProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductReqValidationError) ErrorName() string { return "UpdateProductReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductReqValidationError{}

// Validate checks the field values on UpdateProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProductReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Msg

	return nil
}

// UpdateProductReplyValidationError is the validation error returned by
// UpdateProductReply.Validate if the designated constraints aren't met.
type UpdateProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductReplyValidationError) ErrorName() string {
	return "UpdateProductReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductReplyValidationError{}

// Validate checks the field values on DeleteProductReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteProductReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteProductReqValidationError is the validation error returned by
// DeleteProductReq.Validate if the designated constraints aren't met.
type DeleteProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductReqValidationError) ErrorName() string { return "DeleteProductReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductReqValidationError{}

// Validate checks the field values on DeleteProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProductReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Msg

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteProductReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteProductReplyValidationError is the validation error returned by
// DeleteProductReply.Validate if the designated constraints aren't met.
type DeleteProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductReplyValidationError) ErrorName() string {
	return "DeleteProductReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductReplyValidationError{}

// Validate checks the field values on ListingProductReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListingProductReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListingProductReqValidationError is the validation error returned by
// ListingProductReq.Validate if the designated constraints aren't met.
type ListingProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListingProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListingProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListingProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListingProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListingProductReqValidationError) ErrorName() string {
	return "ListingProductReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListingProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListingProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListingProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListingProductReqValidationError{}

// Validate checks the field values on ListingProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListingProductReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Msg

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListingProductReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListingProductReplyValidationError is the validation error returned by
// ListingProductReply.Validate if the designated constraints aren't met.
type ListingProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListingProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListingProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListingProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListingProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListingProductReplyValidationError) ErrorName() string {
	return "ListingProductReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListingProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListingProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListingProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListingProductReplyValidationError{}

// Validate checks the field values on DeListingProductReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeListingProductReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeListingProductReqValidationError is the validation error returned by
// DeListingProductReq.Validate if the designated constraints aren't met.
type DeListingProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeListingProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeListingProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeListingProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeListingProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeListingProductReqValidationError) ErrorName() string {
	return "DeListingProductReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeListingProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeListingProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeListingProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeListingProductReqValidationError{}

// Validate checks the field values on DeListingProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeListingProductReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Msg

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeListingProductReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeListingProductReplyValidationError is the validation error returned by
// DeListingProductReply.Validate if the designated constraints aren't met.
type DeListingProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeListingProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeListingProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeListingProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeListingProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeListingProductReplyValidationError) ErrorName() string {
	return "DeListingProductReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeListingProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeListingProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeListingProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeListingProductReplyValidationError{}

// Validate checks the field values on GetProductListReplyProduct with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProductListReplyProduct) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProductList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProductListReplyProductValidationError{
					field:  fmt.Sprintf("ProductList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalPage

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	return nil
}

// GetProductListReplyProductValidationError is the validation error returned
// by GetProductListReplyProduct.Validate if the designated constraints aren't met.
type GetProductListReplyProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductListReplyProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductListReplyProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductListReplyProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductListReplyProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductListReplyProductValidationError) ErrorName() string {
	return "GetProductListReplyProductValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductListReplyProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductListReplyProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductListReplyProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductListReplyProductValidationError{}

// Validate checks the field values on CreateProductReplyProduct with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateProductReplyProduct) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateProductReplyProductValidationError is the validation error returned by
// CreateProductReplyProduct.Validate if the designated constraints aren't met.
type CreateProductReplyProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductReplyProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductReplyProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductReplyProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductReplyProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductReplyProductValidationError) ErrorName() string {
	return "CreateProductReplyProductValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductReplyProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductReplyProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductReplyProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductReplyProductValidationError{}

// Validate checks the field values on DeleteProductReplyProduct with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProductReplyProduct) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteProductReplyProductValidationError is the validation error returned by
// DeleteProductReplyProduct.Validate if the designated constraints aren't met.
type DeleteProductReplyProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductReplyProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductReplyProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductReplyProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductReplyProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductReplyProductValidationError) ErrorName() string {
	return "DeleteProductReplyProductValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductReplyProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductReplyProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductReplyProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductReplyProductValidationError{}

// Validate checks the field values on ListingProductReplyProduct with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListingProductReplyProduct) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListingProductReplyProductValidationError is the validation error returned
// by ListingProductReplyProduct.Validate if the designated constraints aren't met.
type ListingProductReplyProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListingProductReplyProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListingProductReplyProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListingProductReplyProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListingProductReplyProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListingProductReplyProductValidationError) ErrorName() string {
	return "ListingProductReplyProductValidationError"
}

// Error satisfies the builtin error interface
func (e ListingProductReplyProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListingProductReplyProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListingProductReplyProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListingProductReplyProductValidationError{}

// Validate checks the field values on DeListingProductReplyProduct with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeListingProductReplyProduct) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeListingProductReplyProductValidationError is the validation error returned
// by DeListingProductReplyProduct.Validate if the designated constraints
// aren't met.
type DeListingProductReplyProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeListingProductReplyProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeListingProductReplyProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeListingProductReplyProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeListingProductReplyProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeListingProductReplyProductValidationError) ErrorName() string {
	return "DeListingProductReplyProductValidationError"
}

// Error satisfies the builtin error interface
func (e DeListingProductReplyProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeListingProductReplyProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeListingProductReplyProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeListingProductReplyProductValidationError{}
